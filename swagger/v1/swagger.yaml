---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/order_statuses":
    get:
      summary: Get order status available
      tags:
      - OrderStatus
      description: Query all order statuses available to use as foreign key for the
        order.
      responses:
        '200':
          description: Order Statuses found
  "/orders":
    get:
      summary: Get all orders
      tags:
      - Orders
      description: With this query you can get all the information about the orders
        that are in the database
      responses:
        '200':
          description: Orders found
    post:
      summary: Create an order
      tags:
      - Orders
      description: Creates an order. Note that the order needs a user to be asign.
        Date information is retrieved by default when status is changed.
      parameters: []
      responses:
        '201':
          description: Order created
        '400':
          description: Order creation failed for parameter missing
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                user_id:
                  type: integer
                payment_status_id:
                  type: integer
                order_status_id:
                  type: integer
              required:
              - amount
              - user_id
              - payment_status_id
              - order_status_id
  "/orders/{id}":
    get:
      summary: Search an order by id
      tags:
      - Orders
      description: Query to search a single order by passing the id of the order as
        parameter
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Order found
        '404':
          description: Order not found
    put:
      summary: Update information of an order
      tags:
      - Orders
      description: Updates any information needed for an order. Including the request
        to change the payment status and order status.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Order updated
        '204':
          description: Order updated - No content returned
        '400':
          description: Order update failed for parameter missing
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                user_id:
                  type: integer
                payment_status_id:
                  type: integer
                order_status_id:
                  type: integer
              required:
              - amount
              - user_id
              - payment_status_id
              - order_status_id
    delete:
      summary: Delete a order by id
      tags:
      - Orders
      description: Query to destroy a single order by passing the id of the order
        as parameter
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Destroy the order
        '204':
          description: Order detroyed - No content returned
  "/orders/{date}":
    get:
      summary: Search an order by date
      tags:
      - Orders
      description: Query to retrieve all orders given a date. Date format must be
        YYYY-MM-DD
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: date
      responses:
        '200':
          description: Orders found
        '404':
          description: Order not found
  "/payment_statuses":
    get:
      summary: Get payment status available
      tags:
      - PaymentStatus
      description: Query all payment statuses available to use as foreign key for
        the order.
      responses:
        '200':
          description: Payment Statuses found
  "/users":
    get:
      summary: Get all users
      tags:
      - Users
      responses:
        '200':
          description: Users found
    post:
      summary: Create an user
      tags:
      - Users
      description: Query to create a user. Name and email must be given. Model verifies
        integrity of email structure.
      parameters: []
      responses:
        '201':
          description: User created
        '400':
          description: User creation failed for parameter missing
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
              required:
              - name
              - email
  "/users/{id}":
    get:
      summary: Search an user by id
      tags:
      - Users
      description: Query to search a single user by passing the id of the order as
        parameter
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User found
        '404':
          description: User not found
    put:
      summary: Update an user based on an id
      tags:
      - Users
      description: Updates an user based on an id. Any field can be modified.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: User created
        '204':
          description: User updated
        '400':
          description: User creation failed for parameter missing
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
              required:
              - name
              - email
    delete:
      summary: Delete a user by id
      tags:
      - Users
      description: Query to destroy a single user by passing the id of the user as
        parameter
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Destroy the user
        '204':
          description: Destroy the user
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000/
